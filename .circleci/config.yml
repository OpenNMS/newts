version: 2.1

executors:
  build-executor:
    machine:
      image: ubuntu-2204:current

parameters:
  cache_version:
    description: the current version of the cache
    type: string
    default: "v4"
  java_version:
    description: the base java version
    type: string
    default: "8"

orbs:
  branch-management: opennms/branch-management@2.3.0

commands:
  cached_checkout:
    description: Restore and Update Source Cache
    steps:
      - restore_cache:
          keys:
            - source-<< pipeline.parameters.cache_version >>-{{ .Branch }}-{{ .Revision }}
            - source-<< pipeline.parameters.cache_version >>-{{ .Branch }}-
            - source-<< pipeline.parameters.cache_version >>-

      - checkout

      # Save source cache
      - save_cache:
          key: source-<< pipeline.parameters.cache_version >>-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

  pre-build:
    description: Set Up the Build Environment
    steps:
      - run:
          name: Install (Or Upgrade) Java << pipeline.parameters.java_version >>
          command: sudo apt update && sudo apt -y install openjdk-<< pipeline.parameters.java_version >>-jdk-headless

  build:
    description: Check Out and Build Code
    steps:
      - fetch_maven_cache
      - run:
          name: Run the build
          no_output_timeout: 20m
          command: |
              mvn -DskipTests=true install

  generate_megapom:
    steps:
      - run:
          name: create checksum file
          command: git ls-files | grep -E '/pom.xml$' | sort -u | xargs cat > /tmp/megapom.xml

  fetch_maven_cache:
    description: Download Update Maven Dependencies
    steps:
      - generate_megapom

      - restore_cache:
          keys:
          - maven-<< pipeline.parameters.cache_version >>-dependencies-{{ checksum "/tmp/megapom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - maven-<< pipeline.parameters.cache_version >>-dependencies-

      - run:
          name: Clean Old Maven Repository Entries
          command: |
            if [ -d ~/.m2/repository ]; then
              # clean out anything older than 14 days
              find ~/.m2/repository -type f -ctime +14 -exec rm -rf {} \; 2>/dev/null || :
              find ~/.m2/repository -depth -type d -print | while read -r DIR; do
                rmdir "$DIR" 2>/dev/null || :
              done
            fi

      - run:
          name: Collect Maven Dependencies
          command: |
             mvn dependency:resolve || true
             mvn dependency:resolve-plugins || true
             mvn dependency:go-offline || true

  store_maven_cache:
    description: Save Maven Dependencies
    steps:
      - generate_megapom

      - run:
          name: Remove Build Artifacts from Maven Cache
          command: |
            if [ -d ~/.m2/repository ]; then
              rm -rf ~/.m2/repository/org/opennms/newts
            fi

      - save_cache:
          paths:
            - ~/.m2
          key: << pipeline.parameters.cache_version >>-dependencies-{{ checksum "/tmp/megapom.xml" }}

jobs:
  build:
    executor: build-executor
    resource_class: xlarge

    environment:
      JAVA_HOME: /usr/lib/jvm/java-<< pipeline.parameters.java_version >>-openjdk-amd64
      MAVEN_OPTS: -Xmx4096m -XX:+UseParallelGC -XX:+UseParallelOldGC -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:-UseGCOverheadLimit

    steps:
      - cached_checkout
      - pre-build
      - build
      - store_maven_cache

      - run:
          name: Run the tests
          no_output_timeout: 20m
          command: mvn -DskipITs=false verify

      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -name \*-summary.xml -exec rm -f {} \;
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/junit/ \;
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: assembly/target/newts*

      - persist_to_workspace:
          root: .
          paths:
            - ./

  merge:
    executor: build-executor

    environment:
      JAVA_HOME: /usr/lib/jvm/java-<< pipeline.parameters.java_version >>-openjdk-amd64
      MAVEN_OPTS: -Xmx4096m -XX:+UseParallelGC -XX:+UseParallelOldGC -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:-UseGCOverheadLimit
      GIT_MERGE_AUTOEDIT: no

    steps:
      - attach_workspace:
          at: .

      - branch-management/merge-branch:
          committer_email: "cicd-system@opennms.com"
          committer_name: "CI/CD System"
          from: release-3.x
          to: main

      # make sure the build passes after merge
      - pre-build
      - build

      - run:
          name: "Push to Main"
          command: git push --no-verify origin main:main

  deploy:
    executor: build-executor

    environment:
      JAVA_HOME: /usr/lib/jvm/java-<< pipeline.parameters.java_version >>-openjdk-amd64

    steps:
      - attach_workspace:
          at: .

      - fetch_maven_cache

      - pre-build
      - run:
          name: Deploy the artifacts
          command: mvn -s .circleci.settings.xml -DskipTests deploy

workflows:
  build-deploy:
    jobs:
      - build:
          filters:
            branches:
              only: /.*/
      - merge:
          requires:
            - build
          filters:
            branches:
              only: /^release-.*/
      - deploy:
          context: 
            - "OSSRH Principal"
          requires:
            - build
          filters:
            branches:
              only:
               - /^release-.*/
               - main
